# Generated by Django 4.2.1 on 2023-08-13 00:14

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('cedar_core', '0174_remove_reference_note_is_factor_note'),
    ]

    operations = [
        migrations.AlterField(
            model_name='ast_method',
            name='ast_method_accno',
            field=models.CharField(help_text='Missing Help Text', max_length=100),
        ),
        migrations.AlterField(
            model_name='ast_method',
            name='ast_method_is_ast_type',
            field=models.BooleanField(help_text='Missing Help Text'),
        ),
        migrations.AlterField(
            model_name='ast_method',
            name='ast_method_name',
            field=models.CharField(help_text='Missing Help Text', max_length=100),
        ),
        migrations.AlterField(
            model_name='ast_method',
            name='ast_method_type_accno',
            field=models.CharField(help_text='Missing Help Text', max_length=100),
        ),
        migrations.AlterField(
            model_name='ast_method',
            name='ast_method_type_name',
            field=models.CharField(help_text='Missing Help Text', max_length=100),
        ),
        migrations.AlterField(
            model_name='ast_method',
            name='hist_ast_method_id',
            field=models.IntegerField(blank=True, help_text='Missing Help Text', null=True),
        ),
        migrations.AlterField(
            model_name='ast_method_old',
            name='ast_method_name',
            field=models.CharField(help_text='Laboratory test method used to determine antimicrobial susceptibility', max_length=50),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard',
            name='ast_reference_std_accno',
            field=models.CharField(blank=True, help_text='Missing Help Text', max_length=200),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard',
            name='ast_reference_std_acronym',
            field=models.CharField(blank=True, help_text='Missing Help Text', max_length=200),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard',
            name='ast_reference_std_desc',
            field=models.CharField(blank=True, help_text='Missing Help Text', max_length=200),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard',
            name='ast_reference_std_name',
            field=models.CharField(help_text='Missing Help Text', max_length=200),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard_version',
            name='ast_reference_std',
            field=models.ForeignKey(help_text='Missing Help Text', on_delete=django.db.models.deletion.CASCADE, to='cedar_core.ast_reference_standard'),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard_version',
            name='ast_reference_std_pub_year',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Missing Help Text'),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard_version',
            name='ast_reference_std_version',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='ast_reference_standard_version',
            name='clsi_std_doc_name',
            field=models.CharField(blank=True, help_text='Missing Help Text', max_length=200),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='aro_number',
            field=models.IntegerField(blank=True, help_text="The preparation/gene's ARO number (from CARD).", null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='is_added',
            field=models.BooleanField(help_text='The preparation/gene was added by the CEDAR team, and is not reflected in the published ATCvet index.'),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='is_duplicate',
            field=models.BooleanField(help_text='There is another ATCvet code which include the same preparation(s). Use the alternate ATCvet code.'),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='is_gene',
            field=models.BooleanField(help_text='The preparation/gene is a gene.'),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelcode_1',
            field=models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's anatomical group.", max_length=4, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelcode_2',
            field=models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's therapeutic main group.", max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelcode_3',
            field=models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's top-level therapeutic subgroup.", max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelcode_4',
            field=models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's bottom-level therapeutic subgroup.", max_length=12, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelcode_5',
            field=models.CharField(blank=True, help_text='The ATCvet code that describes the preparation.', max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_1',
            field=models.CharField(help_text='The anatomical group to which the preparation belongs.', max_length=100),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_2',
            field=models.CharField(blank=True, help_text='The therapeutic main group to which the preparation belongs.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_3',
            field=models.CharField(blank=True, help_text='The chemical/therapeutic/pharmacological subgroup (top-level) to which the preparation belongs.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_4',
            field=models.CharField(blank=True, help_text='The chemical/therapeutic/pharmacological subgroup (bottom-level) to which the preparation belongs.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_4_coarse',
            field=models.CharField(blank=True, help_text='A coarser classification at the fourth level (chemical/therapeutic/pharmacological subgroup) to simplify record retrieval.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_5',
            field=models.CharField(blank=True, help_text='The chemical substance in the preparation.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_5_alt',
            field=models.CharField(blank=True, help_text='An alternative name(s) for the preparation (e.g. USAN, BAN, ubiquitous priprietary name).', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='atc_vet',
            name='levelname_5_comb_example',
            field=models.CharField(blank=True, help_text='An example of a specific combination-preparation representative of the generic combination represented in the ATCvet.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='cedar_exclude',
            name='exclusion',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='cedar_exclude',
            name='exclusion_type',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='evidence_type_quality',
            name='evidence_type',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='evidence_type_quality',
            name='evidence_type_accno',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='evidence_type_quality',
            name='evidence_type_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='factor_description',
            field=models.TextField(blank=True, help_text='A description of the factor.', null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='factor_title',
            field=models.TextField(blank=True, help_text='A title for the factor.', null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='group_allocate_production_stage',
            field=models.ForeignKey(blank=True, help_text='The production stage at which the groups were allocated (i.e. factor applied)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage'),
        ),
        migrations.AlterField(
            model_name='factor',
            name='group_comparator',
            field=models.TextField(blank=True, help_text='A brief description of the comparator (i.e., un-exposed, control, referent)  group.', null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='group_factor',
            field=models.TextField(blank=True, help_text='A brief description of the factor (i.e., exposed, case)  group.', null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='host_level_01',
            field=models.ForeignKey(blank=True, help_text='The host (level 1) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_01'),
        ),
        migrations.AlterField(
            model_name='factor',
            name='host_level_02',
            field=models.ForeignKey(blank=True, help_text='The host (level 2) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_02'),
        ),
        migrations.AlterField(
            model_name='factor',
            name='host_life_stage',
            field=models.ForeignKey(help_text='The life stage of the host.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_life_stage'),
        ),
        migrations.AlterField(
            model_name='factor',
            name='host_production_stream',
            field=models.ForeignKey(help_text='The production stream of the host.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stream'),
        ),
        migrations.AlterField(
            model_name='factor',
            name='pid_factor',
            field=models.PositiveIntegerField(blank=True, help_text='The physical ID of the factor.', null=True),
        ),
        migrations.AlterField(
            model_name='factor',
            name='reference',
            field=models.ForeignKey(default=99999, help_text='The reference that reports the factor.', on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference'),
        ),
        migrations.AlterField(
            model_name='factor_family',
            name='factor_family_name',
            field=models.CharField(blank=True, help_text='The factor family name', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='factor_family_join_parent_factor',
            name='fk_family_join_parent_factor_family_id',
            field=models.ForeignKey(blank=True, help_text='The factor family identifier, or FFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_family'),
        ),
        migrations.AlterField(
            model_name='factor_family_join_parent_factor',
            name='fk_family_join_parent_factor_parent_id',
            field=models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent'),
        ),
        migrations.AlterField(
            model_name='factor_join_res_outcome',
            name='fk_factor_join_res_outcome_factor_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor'),
        ),
        migrations.AlterField(
            model_name='factor_join_res_outcome',
            name='fk_res_outcome_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.res_outcome'),
        ),
        migrations.AlterField(
            model_name='factor_parent',
            name='factor_parent_name',
            field=models.CharField(blank=True, help_text='The parent factor name', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_join_atc_vet',
            name='fk_amu_atc_vet_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.atc_vet'),
        ),
        migrations.AlterField(
            model_name='factor_parent_join_atc_vet',
            name='fk_amu_factor_parent_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent'),
        ),
        migrations.AlterField(
            model_name='factor_parent_join_factor',
            name='fk_parent_join_factor_factor_id',
            field=models.ForeignKey(blank=True, help_text='The factor identifier, or FID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor'),
        ),
        migrations.AlterField(
            model_name='factor_parent_join_factor',
            name='fk_parent_join_factor_factor_parent_id',
            field=models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='applicable_data_source',
            field=models.CharField(blank=True, help_text='The reference, or the person who assessed applicability', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='applicable_data_source_added_year',
            field=models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_applicable_evidence_type_quality_id',
            field=models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_applicability', to='cedar_core.evidence_type_quality'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_entry_user_id',
            field=models.ForeignKey(blank=True, help_text='The user who added the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_entry', to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_frequency_evidence_type_quality_id',
            field=models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_frequency', to='cedar_core.evidence_type_quality'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_metadata_factor_parent_id',
            field=models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.factor_parent'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_metadata_location_02_id',
            field=models.ForeignKey(blank=True, help_text='The ID of the location from the location_02 table', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_02'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='fk_review_user_id',
            field=models.ForeignKey(blank=True, help_text='The user who reviewed the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_review', to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The frequency of factor implementation', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_data_apply_end_year',
            field=models.IntegerField(blank=True, help_text='The last year this frequency applies to; if NULL, all years from start', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_data_apply_start_year',
            field=models.IntegerField(blank=True, help_text='The first year this frequency applies to; if NULL, all years', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_data_source',
            field=models.CharField(blank=True, help_text='The reference, or the person who provided the estimate', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_data_source_added_year',
            field=models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_distribution',
            field=models.CharField(blank=True, help_text='(optional) if a point value is not provided for frequency, a distribution name can be specified with parameters in other fields', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_param_a',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='First distribution parameter. Beta = a. Lower limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_param_b',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Second distribtuion parameter. Normal/log-normal = mean. Beta = b. Poisson = lambda. Mid or most-likely value for pareto, triangular, etc.', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='frequency_param_c',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Third distribution parameter. Normal/log-normal = SD/s, Upper limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='is_applicable_future',
            field=models.BooleanField(blank=True, help_text='Applicability in future', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='is_applicable_past',
            field=models.BooleanField(blank=True, help_text='Applicability in past', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='is_applicable_present',
            field=models.BooleanField(blank=True, help_text='Applicability in present', null=True),
        ),
        migrations.AlterField(
            model_name='factor_parent_metadata',
            name='note',
            field=models.TextField(blank=True, help_text='Notes', null=True),
        ),
        migrations.AlterField(
            model_name='figure_extract_method',
            name='method_convert_to_count',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='figure_extract_method',
            name='method_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='figure_extract_method',
            name='method_name',
            field=models.TextField(blank=True, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='figure_extract_method',
            name='method_wpd',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='genetic_element',
            name='genetic_element_accno',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='genetic_element',
            name='genetic_element_alias',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='genetic_element',
            name='genetic_element_family_accno',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='genetic_element',
            name='genetic_element_name',
            field=models.CharField(max_length=200),
        ),
        migrations.AlterField(
            model_name='genetic_element',
            name='genetic_element_type',
            field=models.CharField(max_length=200),
        ),
        migrations.AlterField(
            model_name='host_01',
            name='host_01_name',
            field=models.CharField(help_text='The host from which the assayed microbe originated, i.e. "Chicken"', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='host_02',
            name='DEP_sel_beef',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='host_02',
            name='DEP_sel_broil',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='host_02',
            name='host_level_01',
            field=models.ForeignKey(help_text='The host (level 1) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_01'),
        ),
        migrations.AlterField(
            model_name='host_02',
            name='host_subtype_name',
            field=models.CharField(help_text='The host subtype from which the assayed microbe originated, i.e. "Eggs" for a parent host "Chicken"', max_length=100),
        ),
        migrations.AlterField(
            model_name='legacy_user',
            name='cedar_esr_user_id',
            field=models.PositiveIntegerField(blank=True, help_text='The user in CEDAR ESR', null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='legacy_user',
            name='name_user',
            field=models.CharField(help_text='The user\'s full name, i.e. "John Smith"', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='country',
            field=models.CharField(default='N/A', help_text='The country or area', max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='is_developing',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='is_land_lock_least_developed_countries',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='is_least_developed_countries',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='is_small_island_developing_states',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='iso_3166_1_alpha2',
            field=models.CharField(blank=True, help_text='ISO country code (2 characters): the country specified by the iso_3166-1_alpha_2 code', max_length=10, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='iso_3166_1_alpha3',
            field=models.CharField(blank=True, help_text='ISO country code (3 characters): the country specified by the iso_3166-1_alpha_3 code', max_length=10, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='iso_3166_1_numeric',
            field=models.IntegerField(blank=True, help_text='ISO country code (numerical): the country specified by the iso_3166-1_num code.', null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_intermediate_subregion_code',
            field=models.IntegerField(blank=True, help_text='Intermediate subregion code', null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_intermediate_subregion_name',
            field=models.CharField(blank=True, help_text='Intermediate subregion name', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_region_code',
            field=models.IntegerField(blank=True, help_text='Region code', null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_region_name',
            field=models.CharField(blank=True, help_text='Region name', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_subregion_code',
            field=models.IntegerField(blank=True, help_text='Subregion code', null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='loc_subregion_name',
            field=models.CharField(blank=True, help_text='Subregion name', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='location_01',
            name='m49',
            field=models.IntegerField(blank=True, help_text='M49 code', null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='cipars_region_atlantic',
            field=models.BooleanField(help_text='The location is within the CIPARS atlantic region'),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='cipars_region_maritimes',
            field=models.BooleanField(help_text='The location is within the CIPARS maritimes region'),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='cipars_region_national',
            field=models.BooleanField(help_text='The location is within the CIPARS national region'),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='cipars_region_prairies',
            field=models.BooleanField(help_text='The location is within the CIPARS prairies region'),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='subdivision',
            field=models.CharField(help_text='The name of the subdivision, i.e. "Ontario"', max_length=100),
        ),
        migrations.AlterField(
            model_name='location_02',
            name='subdivision_type',
            field=models.CharField(blank=True, help_text='The type of subdivision within the country, i.e. "Province"', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='is_cipars_region_atlantic',
            field=models.BooleanField(help_text='The location is within the CIPARS atlantic region'),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='is_cipars_region_maritimes',
            field=models.BooleanField(help_text='The location is within the CIPARS maritimes region'),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='is_cipars_region_national',
            field=models.BooleanField(help_text='The location is within the CIPARS national region'),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='is_cipars_region_prairies',
            field=models.BooleanField(help_text='The location is within the CIPARS prairies region'),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='iso_3166_1_alpha2',
            field=models.ForeignKey(db_column='iso_3166_1_alpha2', help_text='The ISO 3166 alpha-2 country code, i.e. "CA" for Canada', on_delete=django.db.models.deletion.DO_NOTHING, to='cedar_core.location_01', to_field='iso_3166_1_alpha2'),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='iso_3166_2',
            field=models.CharField(help_text='The subdivision code specified by the iso_3166_2 code. Normally two or three letters (i.e. "ON" for Ontario), but the numerals 2-9 may also be used', max_length=3),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='subdivision',
            field=models.CharField(help_text='The name of the subdivision, i.e. "Ontario"', max_length=100),
        ),
        migrations.AlterField(
            model_name='location_sub',
            name='subdivision_type',
            field=models.CharField(blank=True, help_text='The type of subdivision within the country, i.e. "Province"', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='logic_dictionary',
            name='hist_ref_logic_state',
            field=models.CharField(help_text='Missing Help Text', max_length=100),
        ),
        migrations.AlterField(
            model_name='logic_dictionary',
            name='logic_state',
            field=models.CharField(help_text='Missing Help Text', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='logic_dictionary',
            name='logic_state_accurl',
            field=models.URLField(help_text='Missing Help Text'),
        ),
        migrations.AlterField(
            model_name='logic_dictionary',
            name='logic_state_desc',
            field=models.TextField(help_text='Missing Help Text'),
        ),
        migrations.AlterField(
            model_name='microbe_01',
            name='microbe_01_name',
            field=models.CharField(help_text='The microbe subjected to AST, i.e. "Escherichia"', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='microbe_02',
            name='HIST_cedar_esr_microbe_02',
            field=models.PositiveIntegerField(blank=True, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='microbe_02',
            name='microbe_02_name',
            field=models.CharField(help_text='The species or subtype of the microbe subjected to AST, i.e. "coli" for parent microbe "Escherichia"', max_length=100),
        ),
        migrations.AlterField(
            model_name='microbe_02',
            name='microbe_level_01',
            field=models.ForeignKey(blank=True, help_text='The ID of the parent microbe', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_01'),
        ),
        migrations.AlterField(
            model_name='moa_type',
            name='moa_type_name',
            field=models.CharField(help_text='The format of the extracted measure of association data', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='moa_unit',
            name='outcome_unit_name',
            field=models.CharField(help_text='The unit of analysis of the extracted measure of association data', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='model',
            name='fk_model_create_user_id',
            field=models.ForeignKey(blank=True, help_text='The user who created the model/query', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_c', to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='model',
            name='fk_model_maintain_user_id',
            field=models.ManyToManyField(db_table='model_user_join', help_text='The user who maintains the model/query', to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='model',
            name='model_create_date',
            field=models.DateField(blank=True, help_text='The date the model/query was created, in <em>YYYY-MM-DD</em> format', null=True),
        ),
        migrations.AlterField(
            model_name='model',
            name='model_description',
            field=models.CharField(blank=True, help_text="A simple and brief description or 'caption' of the model", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='model',
            name='model_maintain_date',
            field=models.DateField(blank=True, help_text='The date the model/query was last updated, in <em>YYYY-MM-DD</em> format', null=True),
        ),
        migrations.AlterField(
            model_name='model',
            name='model_name',
            field=models.CharField(help_text='The name of the iAM.AMR model, i.e. "iAM.AMR.CHI"', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='production_stage',
            name='HIST_cedar_esr_production_stage',
            field=models.PositiveIntegerField(blank=True, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='production_stage',
            name='production_stage_name',
            field=models.CharField(help_text='The production stage to which the factor applies, or where the effect of a factor is observed, i.e. "Farm"', max_length=20, unique=True),
        ),
        migrations.AlterField(
            model_name='publisher',
            name='pub_issn',
            field=models.TextField(blank=True, help_text='The ISSN of the publication, i.e. "15424863, 00079235"', null=True),
        ),
        migrations.AlterField(
            model_name='publisher',
            name='pub_rank',
            field=models.IntegerField(blank=True, help_text='The Scimago rank at the time of import (2018)', null=True),
        ),
        migrations.AlterField(
            model_name='publisher',
            name='pub_title',
            field=models.TextField(help_text='The title of the publication, i.e. "Nature Reviews Immunology"'),
        ),
        migrations.AlterField(
            model_name='publisher',
            name='pub_type',
            field=models.CharField(blank=True, help_text='The type of publication, i.e. "Journal"', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='archived_reason',
            field=models.CharField(blank=True, help_text='A reason why the resistance-outcome was archived.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='capture_2019_reject',
            field=models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2019 project.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='capture_search_2016',
            field=models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2016 project.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='capture_search_2019',
            field=models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2019 project.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='capture_snowball',
            field=models.BooleanField(blank=True, help_text='The reference was captured through snowballing (searching cited papers, and or reverse citations)', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='capture_submit',
            field=models.BooleanField(blank=True, help_text='The reference was captured through a direct submission to CEDAR', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='cedar_extract_esr',
            field=models.BooleanField(blank=True, help_text='Specifies whether this reference was extracted by the ESR team (i.e. "Enterococcus Scoping Review"). References marked cedar_extract_esr = TRUE were either: a) identified by both the ESR and the 2019 literature search (and extracted by the ESR team) or b) identified by the ESR only.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='cedar_extract_turkey_update',
            field=models.BooleanField(blank=True, help_text='True if identified by the August 2021 update to the search (focused on turkeys only)', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='excluded_extract_reason',
            field=models.TextField(blank=True, help_text='The reason(s) why the factor was excluded from further data extraction.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='excluded_extract_reason_type',
            field=models.ForeignKey(blank=True, help_text='The type of reason why the reference was excluded from further data extraction.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.cedar_exclude'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='excluded_model_reason',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='fk_reference_status_id',
            field=models.IntegerField(blank=True, help_text='The foreign key from the reference_status table. This is being implemented in v3 (CEDAR Web).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='hist_ref_has_ast_explicit_break',
            field=models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No'), ('2', 'Unclear'), ('3', 'Not Reported'), ('4', 'Needs Review')], help_text='Specifies whether the study explicitly reports the MIC values used in its susceptibility tests', max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='hist_ref_has_ast_mic_table',
            field=models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No'), ('2', 'Unclear'), ('3', 'Not Reported'), ('4', 'Needs Review')], help_text='Specifies whether the study includes an MIC table', max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='is_archived',
            field=models.BooleanField(blank=True, default=False, help_text='Where TRUE, the resistance-outcome is archived. ', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='is_excluded_extract',
            field=models.BooleanField(default=False, help_text='Where TRUE, the factor was excluded from further data extraction.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='is_excluded_model',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='key_bibtex',
            field=models.CharField(default='', help_text='An abbreviated identifier for the study in the format of an in-text citation, given by Bibtex, i.e. "Jones2013". A lowercase letter is appended to the date where multiple items may be confused.', max_length=200),
        ),
        migrations.AlterField(
            model_name='reference',
            name='publish_doi',
            field=models.CharField(blank=True, help_text='The DOI associated with the reference, i.e. 10.3168/jds.2014-8432', max_length=500),
        ),
        migrations.AlterField(
            model_name='reference',
            name='publish_pmid',
            field=models.CharField(blank=True, help_text='The eight-digit PMID associated with the reference, i.e. 84889799', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{8}$')]),
        ),
        migrations.AlterField(
            model_name='reference',
            name='publish_year',
            field=models.CharField(blank=True, help_text='The year of reference publication.', max_length=4, validators=[django.core.validators.RegexValidator('^\\d{4}$')]),
        ),
        migrations.AlterField(
            model_name='reference',
            name='publisher',
            field=models.ForeignKey(blank=True, help_text='The publisher of the reference.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.publisher'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='publisher_name_alt',
            field=models.CharField(blank=True, default='', help_text='The name of the publisher at the time of publication, if different from publisher.', max_length=500),
        ),
        migrations.AlterField(
            model_name='reference',
            name='ref_abstract',
            field=models.TextField(blank=True, help_text='The abstract of the reference.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='ref_author',
            field=models.TextField(blank=True, help_text='The author(s) of the reference.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='ref_has_ast_explicit_break',
            field=models.ForeignKey(blank=True, help_text='Specifies whether the study explicitly reports the MIC values used in its susceptibility tests', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ast_explicit_break', to='cedar_core.logic_dictionary'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='ref_has_ast_mic_table',
            field=models.ForeignKey(blank=True, help_text='Specifies whether the study includes an MIC table', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ast_mic_table', to='cedar_core.logic_dictionary'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='ref_title',
            field=models.TextField(default='', help_text='The title of the reference.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='refwk',
            field=models.PositiveIntegerField(blank=True, help_text='The corresponding RefWorks ID for the study', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='study_design',
            field=models.ForeignKey(blank=True, help_text='The type of study design reported in the reference.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.study_design'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='study_design_detail',
            field=models.TextField(blank=True, help_text='A description of the study design reported in the reference.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='study_sample_method',
            field=models.TextField(blank=True, help_text='A description of the sampling method reported in the reference.'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_campylobacter',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_cattle',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_chicken',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_ecoli',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_enterococcus',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_salmonella',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_swine',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='topic_tab_turkey',
            field=models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_is_in_v1_and_v2',
            field=models.BooleanField(blank=True, help_text='This reference exists in both v1 and v2.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_is_v1_import',
            field=models.BooleanField(blank=True, help_text='The factor is imported from v1.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_migrated_from',
            field=models.PositiveIntegerField(blank=True, help_text='For v2 references, this is the  v1 reference which matched during factor migration from v1 to v2. Factors were migrated from this record.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_migrated_to',
            field=models.PositiveIntegerField(blank=True, help_text='For v1 references, this is the v2 reference which matched during factor migration from v1 to v2. Factors were migrated to this record.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_solo_extraction_2016',
            field=models.BooleanField(blank=True, help_text='These are v1 factors that were migrated to v2 references, that will not be dual extracted, as they were thoroughly reviewed by Ashley or Daniella in v1', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v12_v1_id',
            field=models.PositiveIntegerField(blank=True, help_text='The reference ID used within CEDAR v1. This only exists when the reference is an import from v1.', null=True),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v2_fk_m_reference_history_id',
            field=models.ForeignKey(blank=True, help_text='The ID of the m_reference_history table for the latest action entry', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.reference_join_reference_history'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v2_fk_reference_history_last_action',
            field=models.ForeignKey(blank=True, help_text='The ID of the last action associated with the reference in the v2 reference_history scheme. This is for migration to CW reference history and status.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.reference_history_action'),
        ),
        migrations.AlterField(
            model_name='reference',
            name='v2_fk_user_reference_history_last_action',
            field=models.ForeignKey(blank=True, help_text='The ID of the user who was associated with the last action in the v2 reference_history scheme. This is for migration to CW reference history and status', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='reference_history_action',
            name='action_level_fine',
            field=models.CharField(blank=True, help_text='The resultant status level. This refers to how the factor can be used', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='reference_join_location',
            name='location_detail',
            field=models.TextField(blank=True, help_text='A free-text description of the subdivision, allowing users to specify custom subdivisions like "east", "Mid-atlantic region" or "Nationwide"', null=True),
        ),
        migrations.AlterField(
            model_name='reference_join_location',
            name='location_main_id',
            field=models.ForeignKey(blank=True, db_column='location_main_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_01'),
        ),
        migrations.AlterField(
            model_name='reference_join_location',
            name='location_sub_id',
            field=models.ForeignKey(blank=True, db_column='location_sub_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_sub'),
        ),
        migrations.AlterField(
            model_name='reference_join_location',
            name='reference_id',
            field=models.ForeignKey(blank=True, db_column='reference_id', help_text='The reference pertaining to this location', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference'),
        ),
        migrations.AlterField(
            model_name='reference_join_reference_history',
            name='reference_join_history_reference_id',
            field=models.IntegerField(blank=True, help_text="The reference ID corresponding to this history entry. This was formerly a foreign key to the reference table. Since the reference table now has a foreign key for this table's primary id instead, the former foreign key to the reference table can no longer exist. Now that this reference_join_reference_history table is depreciated (purely a legacy table), the foreign key to the reference table is not necessary anyway.", null=True),
        ),
        migrations.AlterField(
            model_name='reference_note',
            name='is_resolved',
            field=models.BooleanField(default=False, help_text='Missing Help Text'),
        ),
        migrations.AlterField(
            model_name='reference_note',
            name='reference',
            field=models.ForeignKey(blank=True, help_text='The reference that reports the factor.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference'),
        ),
        migrations.AlterField(
            model_name='reference_note',
            name='reference_note',
            field=models.TextField(blank=True, help_text='Missing Help Text', null=True),
        ),
        migrations.AlterField(
            model_name='reference_note',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Missing Help Text', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='ast_breakpoint_is_explicit',
            field=models.BooleanField(blank=True, help_text='The breakpoint (if explicit, but not from standard breakpoint source).  This field is not necessary to complete if breakpoint source is true. Set to NA if not assessed', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='ast_breakpoint_version',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_reference_standard_version'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='ast_method',
            field=models.ForeignKey(blank=True, help_text='The AST method used to assay resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_method_old'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='ast_reference_standard',
            field=models.ForeignKey(blank=True, help_text='Missing Help Text', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_reference_standard'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='contable_a',
            field=models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of resistance in the exposed group', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='contable_b',
            field=models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of susceptibility in the exposed group', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='contable_c',
            field=models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of resistance in the referent group', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='contable_d',
            field=models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of susceptibility in the referent group', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='extract_date',
            field=models.DateField(default=django.utils.timezone.now, help_text='The date at which the resistance outcome was extracted'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='extract_project',
            field=models.ForeignKey(blank=True, help_text='The project in which the object was extracted. ', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.source_project'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='extract_user_legacy',
            field=models.ForeignKey(blank=True, help_text='The user who extracted the record.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='factor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='factor_v0_id',
            field=models.IntegerField(blank=True, help_text='The factor ID from v0 of CEDAR (CEDAR 2016), often used in model identifiers prior to 2020.', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='figure_extract_method',
            field=models.ForeignKey(blank=True, help_text='The method used to extract the resistance outcome (RO) from the reference', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.figure_extract_method'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='figure_extract_reproducible',
            field=models.BooleanField(blank=True, help_text='True where a copy of the data extraction tool output is available', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='group_observe_production_stage',
            field=models.ForeignKey(blank=True, help_text='The production stage at which the observations were recorded (i.e. factor observed)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='is_figure_extract',
            field=models.BooleanField(blank=True, help_text='True where the figure was extracted from a figure. This excludes cases where the figure is captioned with values', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='microbe_level_01',
            field=models.ForeignKey(blank=True, help_text='The ID of the parent microbe', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_01'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='microbe_level_02',
            field=models.ForeignKey(blank=True, help_text='The subtype of the microbe assayed for resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_02'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='moa_type',
            field=models.ForeignKey(blank=True, help_text='The type of measure of association reported for the resistance outcome', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_type'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='moa_unit',
            field=models.ForeignKey(blank=True, help_text='The experimental unit or level of analysis for which the measure of association is presented', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_unit'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='odds_ratio',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='odds_ratio_confidence',
            field=models.DecimalField(blank=True, decimal_places=3, help_text='The confidence level associated with the confidence interval (as a percentage, most commonly 95%)', max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='odds_ratio_lo',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The lower (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='odds_ratio_sig',
            field=models.CharField(blank=True, help_text='The significance (p-value) associated with the odds ratio that describes the factor, i.e. "< 0.05". May include symbols, numbers, and letters. There is no significance associated with count or prevalence data, only Odds Ratios. If an odds ratio is provided, without a significance level, please report "NR" for "not reported"', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='odds_ratio_up',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The upper (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='pid_ro',
            field=models.PositiveIntegerField(blank=True, help_text='The canonical resistance outcome ID. The URID is shared between resistance outcomes (ROs) that have been extracted in duplicate', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='place_in_text',
            field=models.TextField(blank=True, help_text='The location of the resistance outcome data in-text, i.e. "Table 2". If the data is from the body of the text, use the page and paragraph numbers (Pg. and Para. respectively)', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='prevtable_a',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='prevtable_b',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='prevtable_c',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='prevtable_d',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='resistance',
            field=models.ForeignKey(blank=True, help_text='The resistance that was assayed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.atc_vet'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='resistance_gene',
            field=models.ForeignKey(blank=True, help_text='The genomic resistance assayed as a measure of resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.genetic_element'),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='table_n_cd',
            field=models.PositiveIntegerField(blank=True, help_text='Missing Help Text', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='v12_ID_factor_v1',
            field=models.IntegerField(blank=True, help_text='The factor ID used within CEDAR v1.', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='v12_ID_reference_v1',
            field=models.IntegerField(blank=True, help_text='The reference ID to which the factor belonged in v1.', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='v12_ID_reference_v2_initial',
            field=models.IntegerField(blank=True, help_text='The reference ID assigned during import of v1 to v2, prior to reassignment of duplicates.', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='v12_is_v1_import',
            field=models.BooleanField(blank=True, help_text='The factor is imported from v1.', null=True),
        ),
        migrations.AlterField(
            model_name='res_outcome',
            name='v12_solo_extraction_2016',
            field=models.BooleanField(blank=True, help_text='These are v1 factors that were migrated to v2 references, that will not be dual extracted, as they were thoroughly reviewed by Ashley or Daniella in v1', null=True),
        ),
        migrations.AlterField(
            model_name='study_design',
            name='study_design_name',
            field=models.CharField(help_text='The overall study design of the study', max_length=50, unique=True),
        ),
    ]
