# Generated by Django 4.2.1 on 2023-08-13 23:09

import django.contrib.auth.validators
from decimal import Decimal
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ast_method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ast_method_name', models.CharField(help_text='Missing Help Text', max_length=100)),
                ('ast_method_accno', models.CharField(help_text='Missing Help Text', max_length=100)),
                ('ast_method_type_name', models.CharField(help_text='Missing Help Text', max_length=100)),
                ('ast_method_type_accno', models.CharField(help_text='Missing Help Text', max_length=100)),
                ('ast_method_is_ast_type', models.BooleanField(help_text='Missing Help Text')),
                ('hist_ast_method_id', models.IntegerField(blank=True, help_text='Missing Help Text', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ast_method_old',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ast_method_name', models.CharField(help_text='Laboratory test method used to determine antimicrobial susceptibility', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ast_reference_standard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ast_reference_std_name', models.CharField(help_text='Missing Help Text', max_length=200)),
                ('ast_reference_std_acronym', models.CharField(blank=True, help_text='Missing Help Text', max_length=200)),
                ('ast_reference_std_accno', models.CharField(blank=True, help_text='Missing Help Text', max_length=200)),
                ('ast_reference_std_desc', models.CharField(blank=True, help_text='Missing Help Text', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ast_reference_standard_version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ast_reference_std_version', models.CharField(blank=True, max_length=200)),
                ('ast_reference_std_pub_year', models.PositiveSmallIntegerField(blank=True, help_text='Missing Help Text')),
                ('clsi_std_doc_name', models.CharField(blank=True, help_text='Missing Help Text', max_length=200)),
                ('ast_reference_std', models.ForeignKey(help_text='Missing Help Text', on_delete=django.db.models.deletion.CASCADE, to='cedar_core.ast_reference_standard')),
            ],
        ),
        migrations.CreateModel(
            name='atc_vet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levelname_1', models.CharField(help_text='The anatomical group to which the preparation belongs.', max_length=100)),
                ('levelname_2', models.CharField(blank=True, help_text='The therapeutic main group to which the preparation belongs.', max_length=100, null=True)),
                ('levelname_3', models.CharField(blank=True, help_text='The chemical/therapeutic/pharmacological subgroup (top-level) to which the preparation belongs.', max_length=100, null=True)),
                ('levelname_4', models.CharField(blank=True, help_text='The chemical/therapeutic/pharmacological subgroup (bottom-level) to which the preparation belongs.', max_length=200, null=True)),
                ('levelname_4_coarse', models.CharField(blank=True, help_text='A coarser classification at the fourth level (chemical/therapeutic/pharmacological subgroup) to simplify record retrieval.', max_length=100, null=True)),
                ('levelname_5', models.CharField(blank=True, help_text='The chemical substance in the preparation.', max_length=100, null=True)),
                ('levelname_5_alt', models.CharField(blank=True, help_text='An alternative name(s) for the preparation (e.g. USAN, BAN, ubiquitous priprietary name).', max_length=100, null=True)),
                ('levelname_5_comb_example', models.CharField(blank=True, help_text='An example of a specific combination-preparation representative of the generic combination represented in the ATCvet.', max_length=100, null=True)),
                ('levelcode_1', models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's anatomical group.", max_length=4, null=True)),
                ('levelcode_2', models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's therapeutic main group.", max_length=8, null=True)),
                ('levelcode_3', models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's top-level therapeutic subgroup.", max_length=10, null=True)),
                ('levelcode_4', models.CharField(blank=True, help_text="The portion of the ATCvet code that describes the preparation's bottom-level therapeutic subgroup.", max_length=12, null=True)),
                ('levelcode_5', models.CharField(blank=True, help_text='The ATCvet code that describes the preparation.', max_length=16, null=True)),
                ('is_added', models.BooleanField(help_text='The preparation/gene was added by the CEDAR team, and is not reflected in the published ATCvet index.')),
                ('is_gene', models.BooleanField(help_text='The preparation/gene is a gene.')),
                ('aro_number', models.IntegerField(blank=True, help_text="The preparation/gene's ARO number (from CARD).", null=True)),
                ('is_duplicate', models.BooleanField(help_text='There is another ATCvet code which include the same preparation(s). Use the alternate ATCvet code.')),
            ],
        ),
        migrations.CreateModel(
            name='cedar_exclude',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exclusion', models.CharField(blank=True, max_length=500, null=True)),
                ('exclusion_type', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='evidence_type_quality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evidence_type', models.CharField(blank=True, max_length=500, null=True)),
                ('evidence_type_accno', models.CharField(blank=True, max_length=500, null=True)),
                ('evidence_type_description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid_factor', models.PositiveIntegerField(blank=True, help_text='The physical ID of the factor.', null=True)),
                ('factor_title', models.TextField(blank=True, help_text='A title for the factor.', null=True)),
                ('factor_description', models.TextField(blank=True, help_text='A description of the factor.', null=True)),
                ('group_factor', models.TextField(blank=True, help_text='A brief description of the factor (i.e., exposed, case)  group.', null=True)),
                ('group_comparator', models.TextField(blank=True, help_text='A brief description of the comparator (i.e., un-exposed, control, referent)  group.', null=True)),
                ('exclude_cedar', models.BooleanField(blank=True, null=True)),
                ('HIST_ESR_host_01_id', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='factor_family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor_family_name', models.CharField(blank=True, help_text='The factor family name', max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='factor_parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor_parent_name', models.CharField(blank=True, help_text='The parent factor name', max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='figure_extract_method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method_name', models.TextField(blank=True, null=True, unique=True)),
                ('method_description', models.TextField(blank=True, null=True)),
                ('method_wpd', models.BooleanField(blank=True, null=True)),
                ('method_convert_to_count', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='genetic_element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genetic_element_name', models.CharField(max_length=200)),
                ('genetic_element_alias', models.CharField(blank=True, max_length=200)),
                ('genetic_element_type', models.CharField(max_length=200)),
                ('genetic_element_accno', models.CharField(blank=True, max_length=200)),
                ('genetic_element_family_accno', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='host_01',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_01_name', models.CharField(help_text='The host from which the assayed microbe originated, i.e. "Chicken"', max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='legacy_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_user', models.CharField(help_text='The user\'s full name, i.e. "John Smith"', max_length=50, unique=True)),
                ('cedar_esr_user_id', models.PositiveIntegerField(blank=True, help_text='The user in CEDAR ESR', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='location_01',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(default='N/A', help_text='The country or area', max_length=100, unique=True)),
                ('iso_3166_1_alpha3', models.CharField(blank=True, help_text='ISO country code (3 characters): the country specified by the iso_3166-1_alpha_3 code', max_length=10, null=True, unique=True)),
                ('iso_3166_1_alpha2', models.CharField(blank=True, help_text='ISO country code (2 characters): the country specified by the iso_3166-1_alpha_2 code', max_length=10, null=True, unique=True)),
                ('iso_3166_1_numeric', models.IntegerField(blank=True, help_text='ISO country code (numerical): the country specified by the iso_3166-1_num code.', null=True, unique=True)),
                ('m49', models.IntegerField(blank=True, help_text='M49 code', null=True, unique=True)),
                ('loc_subregion_name', models.CharField(blank=True, help_text='Subregion name', max_length=100, null=True)),
                ('loc_subregion_code', models.IntegerField(blank=True, help_text='Subregion code', null=True)),
                ('loc_intermediate_subregion_name', models.CharField(blank=True, help_text='Intermediate subregion name', max_length=100, null=True)),
                ('loc_intermediate_subregion_code', models.IntegerField(blank=True, help_text='Intermediate subregion code', null=True)),
                ('loc_region_name', models.CharField(blank=True, help_text='Region name', max_length=100, null=True)),
                ('loc_region_code', models.IntegerField(blank=True, help_text='Region code', null=True)),
                ('is_least_developed_countries', models.BooleanField(blank=True, null=True)),
                ('is_land_lock_least_developed_countries', models.BooleanField(blank=True, null=True)),
                ('is_small_island_developing_states', models.BooleanField(blank=True, null=True)),
                ('is_developing', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='location_sub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision_type', models.CharField(blank=True, help_text='The type of subdivision within the country, i.e. "Province"', max_length=100, null=True)),
                ('subdivision', models.CharField(help_text='The name of the subdivision, i.e. "Ontario"', max_length=100)),
                ('iso_3166_2', models.CharField(help_text='The subdivision code specified by the iso_3166_2 code. Normally two or three letters (i.e. "ON" for Ontario), but the numerals 2-9 may also be used', max_length=3)),
                ('is_cipars_region_national', models.BooleanField(help_text='The location is within the CIPARS national region')),
                ('is_cipars_region_atlantic', models.BooleanField(help_text='The location is within the CIPARS atlantic region')),
                ('is_cipars_region_maritimes', models.BooleanField(help_text='The location is within the CIPARS maritimes region')),
                ('is_cipars_region_prairies', models.BooleanField(help_text='The location is within the CIPARS prairies region')),
                ('iso_3166_1_alpha2', models.ForeignKey(db_column='iso_3166_1_alpha2', help_text='The ISO 3166 alpha-2 country code, i.e. "CA" for Canada', on_delete=django.db.models.deletion.DO_NOTHING, to='cedar_core.location_01', to_field='iso_3166_1_alpha2')),
            ],
        ),
        migrations.CreateModel(
            name='logic_dictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logic_state', models.CharField(help_text='Missing Help Text', max_length=50, unique=True)),
                ('logic_state_desc', models.TextField(help_text='Missing Help Text')),
                ('logic_state_accurl', models.URLField(help_text='Missing Help Text')),
                ('hist_ref_logic_state', models.CharField(help_text='Missing Help Text', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='microbe_01',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('microbe_01_name', models.CharField(help_text='The microbe subjected to AST, i.e. "Escherichia"', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='microbe_02',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('microbe_02_name', models.CharField(help_text='The species or subtype of the microbe subjected to AST, i.e. "coli" for parent microbe "Escherichia"', max_length=100)),
                ('HIST_cedar_esr_microbe_02', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('microbe_level_01', models.ForeignKey(blank=True, help_text='The ID of the parent microbe', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_01')),
            ],
        ),
        migrations.CreateModel(
            name='moa_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moa_type_name', models.CharField(help_text='The format of the extracted measure of association data', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='moa_unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outcome_unit_name', models.CharField(help_text='The unit of analysis of the extracted measure of association data', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='production_stage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_stage_name', models.CharField(help_text='The production stage to which the factor applies, or where the effect of a factor is observed, i.e. "Farm"', max_length=20, unique=True)),
                ('HIST_cedar_esr_production_stage', models.PositiveIntegerField(blank=True, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pub_type', models.CharField(blank=True, help_text='The type of publication, i.e. "Journal"', max_length=50, null=True)),
                ('pub_title', models.TextField(help_text='The title of the publication, i.e. "Nature Reviews Immunology"')),
                ('pub_rank', models.IntegerField(blank=True, help_text='The Scimago rank at the time of import (2018)', null=True)),
                ('pub_issn', models.TextField(blank=True, help_text='The ISSN of the publication, i.e. "15424863, 00079235"', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid_reference', models.PositiveIntegerField(blank=True, null=True)),
                ('key_bibtex', models.CharField(default='', help_text='An abbreviated identifier for the study in the format of an in-text citation, given by Bibtex, i.e. "Jones2013". A lowercase letter is appended to the date where multiple items may be confused.', max_length=200)),
                ('refwk', models.PositiveIntegerField(blank=True, help_text='The corresponding RefWorks ID for the study', null=True)),
                ('is_archived', models.BooleanField(blank=True, default=False, help_text='Where TRUE, the resistance-outcome is archived. ', null=True)),
                ('archived_reason', models.CharField(blank=True, help_text='A reason why the resistance-outcome was archived.', max_length=200, null=True)),
                ('is_excluded_extract', models.BooleanField(default=False, help_text='Where TRUE, the factor was excluded from further data extraction.')),
                ('excluded_extract_reason', models.TextField(blank=True, help_text='The reason(s) why the factor was excluded from further data extraction.', null=True)),
                ('is_excluded_model', models.BooleanField(blank=True, null=True)),
                ('excluded_model_reason', models.CharField(blank=True, max_length=500, null=True)),
                ('publisher_name_alt', models.CharField(blank=True, default='', help_text='The name of the publisher at the time of publication, if different from publisher.', max_length=500)),
                ('publish_year', models.CharField(blank=True, help_text='The year of reference publication.', max_length=4, validators=[django.core.validators.RegexValidator('^\\d{4}$')])),
                ('publish_doi', models.CharField(blank=True, help_text='The DOI associated with the reference, i.e. 10.3168/jds.2014-8432', max_length=500)),
                ('publish_pmid', models.CharField(blank=True, help_text='The eight-digit PMID associated with the reference, i.e. 84889799', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{8}$')])),
                ('ref_title', models.TextField(default='', help_text='The title of the reference.')),
                ('ref_author', models.TextField(blank=True, help_text='The author(s) of the reference.')),
                ('ref_abstract', models.TextField(blank=True, help_text='The abstract of the reference.')),
                ('study_design_detail', models.TextField(blank=True, help_text='A description of the study design reported in the reference.')),
                ('study_sample_method', models.TextField(blank=True, help_text='A description of the sampling method reported in the reference.')),
                ('hist_ref_has_ast_explicit_break', models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No'), ('2', 'Unclear'), ('3', 'Not Reported'), ('4', 'Needs Review')], help_text='Specifies whether the study explicitly reports the MIC values used in its susceptibility tests', max_length=2, null=True)),
                ('hist_ref_has_ast_mic_table', models.CharField(blank=True, choices=[('1', 'Yes'), ('0', 'No'), ('2', 'Unclear'), ('3', 'Not Reported'), ('4', 'Needs Review')], help_text='Specifies whether the study includes an MIC table', max_length=2, null=True)),
                ('topic_tab_cattle', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_chicken', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_swine', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_turkey', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_ecoli', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_enterococcus', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_salmonella', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('topic_tab_campylobacter', models.BooleanField(blank=True, help_text='The title or abstract of this reference contains keywords related to this topic (animal, or microbe).', null=True)),
                ('capture_search_2016', models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2016 project.', null=True)),
                ('capture_search_2019', models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2019 project.', null=True)),
                ('capture_2019_reject', models.BooleanField(blank=True, help_text='Where TRUE, the reference was captured in the iAM.AMR.SEARCH_2019 project.', null=True)),
                ('capture_snowball', models.BooleanField(blank=True, help_text='The reference was captured through snowballing (searching cited papers, and or reverse citations)', null=True)),
                ('capture_submit', models.BooleanField(blank=True, help_text='The reference was captured through a direct submission to CEDAR', null=True)),
                ('cedar_extract_esr', models.BooleanField(blank=True, help_text='Specifies whether this reference was extracted by the ESR team (i.e. "Enterococcus Scoping Review"). References marked cedar_extract_esr = TRUE were either: a) identified by both the ESR and the 2019 literature search (and extracted by the ESR team) or b) identified by the ESR only.', null=True)),
                ('cedar_extract_turkey_update', models.BooleanField(blank=True, help_text='True if identified by the August 2021 update to the search (focused on turkeys only)', null=True)),
                ('v12_is_v1_import', models.BooleanField(blank=True, help_text='The factor is imported from v1.', null=True)),
                ('v12_v1_id', models.PositiveIntegerField(blank=True, help_text='The reference ID used within CEDAR v1. This only exists when the reference is an import from v1.', null=True)),
                ('v12_is_in_v1_and_v2', models.BooleanField(blank=True, help_text='This reference exists in both v1 and v2.', null=True)),
                ('v12_migrated_from', models.PositiveIntegerField(blank=True, help_text='For v2 references, this is the  v1 reference which matched during factor migration from v1 to v2. Factors were migrated from this record.', null=True)),
                ('v12_migrated_to', models.PositiveIntegerField(blank=True, help_text='For v1 references, this is the v2 reference which matched during factor migration from v1 to v2. Factors were migrated to this record.', null=True)),
                ('v12_solo_extraction_2016', models.BooleanField(blank=True, help_text='These are v1 factors that were migrated to v2 references, that will not be dual extracted, as they were thoroughly reviewed by Ashley or Daniella in v1', null=True)),
                ('fk_reference_status_id', models.IntegerField(blank=True, help_text='The foreign key from the reference_status table. This is being implemented in v3 (CEDAR Web).', null=True)),
                ('excluded_extract_reason_type', models.ForeignKey(blank=True, help_text='The type of reason why the reference was excluded from further data extraction.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.cedar_exclude')),
                ('publisher', models.ForeignKey(blank=True, help_text='The publisher of the reference.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.publisher')),
                ('ref_ast_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_method_old')),
                ('ref_country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_01')),
                ('ref_has_ast_explicit_break', models.ForeignKey(blank=True, help_text='Specifies whether the study explicitly reports the MIC values used in its susceptibility tests', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ast_explicit_break', to='cedar_core.logic_dictionary')),
                ('ref_has_ast_mic_table', models.ForeignKey(blank=True, help_text='Specifies whether the study includes an MIC table', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ast_mic_table', to='cedar_core.logic_dictionary')),
            ],
        ),
        migrations.CreateModel(
            name='reference_history_action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=200)),
                ('action_level_coarse', models.CharField(blank=True, max_length=200, null=True)),
                ('action_level_coarse_num', models.IntegerField(blank=True, null=True)),
                ('action_description', models.TextField(blank=True, null=True)),
                ('action_level_fine', models.CharField(blank=True, help_text='The resultant status level. This refers to how the factor can be used', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='res_outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid_ro', models.PositiveIntegerField(blank=True, help_text='The canonical resistance outcome ID. The URID is shared between resistance outcomes (ROs) that have been extracted in duplicate', null=True)),
                ('place_in_text', models.TextField(blank=True, help_text='The location of the resistance outcome data in-text, i.e. "Table 2". If the data is from the body of the text, use the page and paragraph numbers (Pg. and Para. respectively)', null=True)),
                ('contable_a', models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of resistance in the exposed group', null=True)),
                ('contable_b', models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of susceptibility in the exposed group', null=True)),
                ('contable_c', models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of resistance in the referent group', null=True)),
                ('contable_d', models.PositiveIntegerField(blank=True, help_text='The number (count) of observations of susceptibility in the referent group', null=True)),
                ('prevtable_a', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('prevtable_b', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('prevtable_c', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('prevtable_d', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('table_n_ab', models.PositiveIntegerField(blank=True, help_text=None, null=True)),
                ('table_n_cd', models.PositiveIntegerField(blank=True, help_text='Missing Help Text', null=True)),
                ('odds_ratio', models.DecimalField(blank=True, decimal_places=2, help_text='The odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('odds_ratio_lo', models.DecimalField(blank=True, decimal_places=2, help_text='The lower (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('odds_ratio_up', models.DecimalField(blank=True, decimal_places=2, help_text='The upper (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('odds_ratio_sig', models.CharField(blank=True, help_text='The significance (p-value) associated with the odds ratio that describes the factor, i.e. "< 0.05". May include symbols, numbers, and letters. There is no significance associated with count or prevalence data, only Odds Ratios. If an odds ratio is provided, without a significance level, please report "NR" for "not reported"', max_length=20, null=True)),
                ('odds_ratio_confidence', models.DecimalField(blank=True, decimal_places=3, help_text='The confidence level associated with the confidence interval (as a percentage, most commonly 95%)', max_digits=5, null=True)),
                ('ast_breakpoint_is_explicit', models.BooleanField(blank=True, help_text='The breakpoint (if explicit, but not from standard breakpoint source).  This field is not necessary to complete if breakpoint source is true. Set to NA if not assessed', null=True)),
                ('is_figure_extract', models.BooleanField(blank=True, help_text='True where the figure was extracted from a figure. This excludes cases where the figure is captioned with values', null=True)),
                ('figure_extract_reproducible', models.BooleanField(blank=True, help_text='True where a copy of the data extraction tool output is available', null=True)),
                ('extract_date', models.DateField(default=django.utils.timezone.now, help_text='The date at which the resistance outcome was extracted')),
                ('factor_v0_id', models.IntegerField(blank=True, help_text='The factor ID from v0 of CEDAR (CEDAR 2016), often used in model identifiers prior to 2020.', null=True)),
                ('v12_is_v1_import', models.BooleanField(blank=True, help_text='The factor is imported from v1.', null=True)),
                ('v12_ID_factor_v1', models.IntegerField(blank=True, help_text='The factor ID used within CEDAR v1.', null=True)),
                ('v12_ID_reference_v1', models.IntegerField(blank=True, help_text='The reference ID to which the factor belonged in v1.', null=True)),
                ('v12_ID_reference_v2_initial', models.IntegerField(blank=True, help_text='The reference ID assigned during import of v1 to v2, prior to reassignment of duplicates.', null=True)),
                ('v12_solo_extraction_2016', models.BooleanField(blank=True, help_text='These are v1 factors that were migrated to v2 references, that will not be dual extracted, as they were thoroughly reviewed by Ashley or Daniella in v1', null=True)),
                ('ast_breakpoint_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_reference_standard_version')),
                ('ast_method', models.ForeignKey(blank=True, help_text='The AST method used to assay resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_method_old')),
                ('ast_reference_standard', models.ForeignKey(blank=True, help_text='Missing Help Text', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.ast_reference_standard')),
            ],
        ),
        migrations.CreateModel(
            name='study_design',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_design_name', models.CharField(help_text='The overall study design of the study', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='source_project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_project_name', models.CharField(max_length=100)),
                ('source_project_entry_date', models.DateField()),
                ('project_factors', models.ManyToManyField(db_table='source_project_join_factor', related_name='project_factors', to='cedar_core.factor')),
                ('project_references', models.ManyToManyField(db_table='source_project_join_reference', related_name='project_references', to='cedar_core.reference')),
                ('project_res_outcomes', models.ManyToManyField(db_table='source_project_join_res_outcome', related_name='project_res_outcomes', to='cedar_core.res_outcome')),
                ('source_project_user_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_user_entry', to='cedar_core.legacy_user')),
                ('source_project_user_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_user_owner', to='cedar_core.legacy_user')),
            ],
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='extract_project',
            field=models.ForeignKey(blank=True, help_text='The project in which the object was extracted. ', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.source_project'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='extract_user_legacy',
            field=models.ForeignKey(blank=True, help_text='The user who extracted the record.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='factor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='figure_extract_method',
            field=models.ForeignKey(blank=True, help_text='The method used to extract the resistance outcome (RO) from the reference', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.figure_extract_method'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='group_observe_production_stage',
            field=models.ForeignKey(blank=True, help_text='The production stage at which the observations were recorded (i.e. factor observed)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='microbe_level_01',
            field=models.ForeignKey(blank=True, help_text='The ID of the parent microbe', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_01'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='microbe_level_02',
            field=models.ForeignKey(blank=True, help_text='The subtype of the microbe assayed for resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_02'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='moa_type',
            field=models.ForeignKey(blank=True, help_text='The type of measure of association reported for the resistance outcome', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_type'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='moa_unit',
            field=models.ForeignKey(blank=True, help_text='The experimental unit or level of analysis for which the measure of association is presented', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_unit'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='resistance',
            field=models.ForeignKey(blank=True, help_text='The resistance that was assayed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.atc_vet'),
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='resistance_gene',
            field=models.ForeignKey(blank=True, help_text='The genomic resistance assayed as a measure of resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.genetic_element'),
        ),
        migrations.CreateModel(
            name='reference_note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_note', models.TextField(blank=True, help_text='Missing Help Text', null=True)),
                ('is_resolved', models.BooleanField(default=False, help_text='Missing Help Text')),
                ('reference', models.ForeignKey(blank=True, help_text='The reference that reports the factor.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference')),
                ('user', models.ForeignKey(blank=True, help_text='Missing Help Text', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user')),
            ],
        ),
        migrations.CreateModel(
            name='reference_join_reference_history',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_join_history_reference_id', models.IntegerField(blank=True, help_text="The reference ID corresponding to this history entry. This was formerly a foreign key to the reference table. Since the reference table now has a foreign key for this table's primary id instead, the former foreign key to the reference table can no longer exist. Now that this reference_join_reference_history table is depreciated (purely a legacy table), the foreign key to the reference table is not necessary anyway.", null=True)),
                ('action_date', models.DateTimeField(blank=True, null=True)),
                ('is_cedar_esr', models.BooleanField(default=False)),
                ('fk_reference_history_action_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.reference_history_action')),
                ('fk_user_r_join_rh_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user')),
            ],
        ),
        migrations.CreateModel(
            name='reference_join_location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hist_join_id', models.IntegerField(blank=True, null=True)),
                ('location_detail', models.TextField(blank=True, help_text='A free-text description of the subdivision, allowing users to specify custom subdivisions like "east", "Mid-atlantic region" or "Nationwide"', null=True)),
                ('location_alpha3_dep', models.TextField(blank=True, null=True)),
                ('location_main_id', models.ForeignKey(blank=True, db_column='location_main_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_01')),
                ('location_sub_id', models.ForeignKey(blank=True, db_column='location_sub_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_sub')),
                ('reference_id', models.ForeignKey(blank=True, db_column='reference_id', help_text='The reference pertaining to this location', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference')),
            ],
        ),
        migrations.AddField(
            model_name='reference',
            name='source_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.source_project'),
        ),
        migrations.AddField(
            model_name='reference',
            name='study_design',
            field=models.ForeignKey(blank=True, help_text='The type of study design reported in the reference.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.study_design'),
        ),
        migrations.AddField(
            model_name='reference',
            name='v2_fk_m_reference_history_id',
            field=models.ForeignKey(blank=True, help_text='The ID of the m_reference_history table for the latest action entry', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.reference_join_reference_history'),
        ),
        migrations.AddField(
            model_name='reference',
            name='v2_fk_reference_history_last_action',
            field=models.ForeignKey(blank=True, help_text='The ID of the last action associated with the reference in the v2 reference_history scheme. This is for migration to CW reference history and status.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.reference_history_action'),
        ),
        migrations.AddField(
            model_name='reference',
            name='v2_fk_user_reference_history_last_action',
            field=models.ForeignKey(blank=True, help_text='The ID of the user who was associated with the last action in the v2 reference_history scheme. This is for migration to CW reference history and status', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user'),
        ),
        migrations.CreateModel(
            name='production_stream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_stream_name', models.CharField(max_length=100)),
                ('host_level_01', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cedar_core.host_01')),
            ],
        ),
        migrations.CreateModel(
            name='model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='The name of the iAM.AMR model, i.e. "iAM.AMR.CHI"', max_length=20, unique=True)),
                ('model_description', models.CharField(blank=True, help_text="A simple and brief description or 'caption' of the model", max_length=100, null=True)),
                ('model_create_date', models.DateField(blank=True, help_text='The date the model/query was created, in <em>YYYY-MM-DD</em> format', null=True)),
                ('model_maintain_date', models.DateField(blank=True, help_text='The date the model/query was last updated, in <em>YYYY-MM-DD</em> format', null=True)),
                ('fk_model_create_user_id', models.ForeignKey(blank=True, help_text='The user who created the model/query', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_c', to='cedar_core.legacy_user')),
                ('fk_model_maintain_user_id', models.ManyToManyField(db_table='model_user_join', help_text='The user who maintains the model/query', to='cedar_core.legacy_user')),
            ],
        ),
        migrations.CreateModel(
            name='location_02',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision_code', models.CharField(max_length=3)),
                ('subdivision', models.CharField(help_text='The name of the subdivision, i.e. "Ontario"', max_length=100)),
                ('subdivision_type', models.CharField(blank=True, help_text='The type of subdivision within the country, i.e. "Province"', max_length=200, null=True)),
                ('cipars_region_national', models.BooleanField(help_text='The location is within the CIPARS national region')),
                ('cipars_region_atlantic', models.BooleanField(help_text='The location is within the CIPARS atlantic region')),
                ('cipars_region_maritimes', models.BooleanField(help_text='The location is within the CIPARS maritimes region')),
                ('cipars_region_prairies', models.BooleanField(help_text='The location is within the CIPARS prairies region')),
                ('fk_location_02_location_01_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='cedar_core.location_01', to_field='iso_3166_1_alpha2')),
            ],
        ),
        migrations.CreateModel(
            name='host_life_stage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_life_stage_name', models.CharField(max_length=100)),
                ('applies_to_hosts', models.ManyToManyField(db_table='host_life_stage_join_host_level_01', to='cedar_core.host_01')),
            ],
        ),
        migrations.CreateModel(
            name='host_02',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_subtype_name', models.CharField(help_text='The host subtype from which the assayed microbe originated, i.e. "Eggs" for a parent host "Chicken"', max_length=100)),
                ('DEP_sel_beef', models.BooleanField(blank=True, null=True)),
                ('DEP_sel_broil', models.BooleanField(blank=True, null=True)),
                ('HIST_host_01_id', models.IntegerField(blank=True, null=True)),
                ('host_level_01', models.ForeignKey(help_text='The host (level 1) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_01')),
                ('host_life_stage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_life_stage')),
                ('host_production_stream', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stream')),
            ],
        ),
        migrations.CreateModel(
            name='factor_parent_metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.DecimalField(blank=True, decimal_places=2, help_text='The frequency of factor implementation', max_digits=10, null=True)),
                ('frequency_distribution', models.CharField(blank=True, help_text='(optional) if a point value is not provided for frequency, a distribution name can be specified with parameters in other fields', max_length=200, null=True)),
                ('frequency_param_a', models.DecimalField(blank=True, decimal_places=2, help_text='First distribution parameter. Beta = a. Lower limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_param_b', models.DecimalField(blank=True, decimal_places=2, help_text='Second distribtuion parameter. Normal/log-normal = mean. Beta = b. Poisson = lambda. Mid or most-likely value for pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_param_c', models.DecimalField(blank=True, decimal_places=2, help_text='Third distribution parameter. Normal/log-normal = SD/s, Upper limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_data_apply_start_year', models.IntegerField(blank=True, help_text='The first year this frequency applies to; if NULL, all years', null=True)),
                ('frequency_data_apply_end_year', models.IntegerField(blank=True, help_text='The last year this frequency applies to; if NULL, all years from start', null=True)),
                ('frequency_data_source', models.CharField(blank=True, help_text='The reference, or the person who provided the estimate', max_length=500, null=True)),
                ('frequency_data_source_added_year', models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True)),
                ('note', models.TextField(blank=True, help_text='Notes', null=True)),
                ('is_applicable_past', models.BooleanField(blank=True, help_text='Applicability in past', null=True)),
                ('is_applicable_present', models.BooleanField(blank=True, help_text='Applicability in present', null=True)),
                ('is_applicable_future', models.BooleanField(blank=True, help_text='Applicability in future', null=True)),
                ('applicable_data_source', models.CharField(blank=True, help_text='The reference, or the person who assessed applicability', max_length=200, null=True)),
                ('applicable_data_source_added_year', models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True)),
                ('fk_applicable_evidence_type_quality_id', models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_applicability', to='cedar_core.evidence_type_quality')),
                ('fk_entry_user_id', models.ForeignKey(blank=True, help_text='The user who added the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_entry', to='cedar_core.legacy_user')),
                ('fk_frequency_evidence_type_quality_id', models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_frequency', to='cedar_core.evidence_type_quality')),
                ('fk_metadata_factor_parent_id', models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.factor_parent')),
                ('fk_metadata_location_02_id', models.ForeignKey(blank=True, help_text='The ID of the location from the location_02 table', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_02')),
                ('fk_review_user_id', models.ForeignKey(blank=True, help_text='The user who reviewed the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_review', to='cedar_core.legacy_user')),
            ],
        ),
        migrations.CreateModel(
            name='factor_parent_join_factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fk_parent_join_factor_factor_id', models.ForeignKey(blank=True, help_text='The factor identifier, or FID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor')),
                ('fk_parent_join_factor_factor_parent_id', models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent')),
            ],
        ),
        migrations.CreateModel(
            name='factor_parent_join_atc_vet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fk_amu_atc_vet_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.atc_vet')),
                ('fk_amu_factor_parent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent')),
            ],
        ),
        migrations.CreateModel(
            name='factor_join_res_outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fk_factor_join_res_outcome_factor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor')),
                ('fk_res_outcome_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.res_outcome')),
            ],
        ),
        migrations.CreateModel(
            name='factor_family_join_parent_factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fk_family_join_parent_factor_family_id', models.ForeignKey(blank=True, help_text='The factor family identifier, or FFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_family')),
                ('fk_family_join_parent_factor_parent_id', models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor_parent')),
            ],
        ),
        migrations.AddField(
            model_name='factor',
            name='group_allocate_production_stage',
            field=models.ForeignKey(blank=True, help_text='The production stage at which the groups were allocated (i.e. factor applied)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage'),
        ),
        migrations.AddField(
            model_name='factor',
            name='host_level_01',
            field=models.ForeignKey(blank=True, help_text='The host (level 1) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_01'),
        ),
        migrations.AddField(
            model_name='factor',
            name='host_level_02',
            field=models.ForeignKey(blank=True, help_text='The host (level 2) from which the assayed samples were isolated.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_02'),
        ),
        migrations.AddField(
            model_name='factor',
            name='host_life_stage',
            field=models.ForeignKey(help_text='The life stage of the host.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_life_stage'),
        ),
        migrations.AddField(
            model_name='factor',
            name='host_production_stream',
            field=models.ForeignKey(help_text='The production stream of the host.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stream'),
        ),
        migrations.AddField(
            model_name='factor',
            name='reference',
            field=models.ForeignKey(default=99999, help_text='The reference that reports the factor.', on_delete=django.db.models.deletion.CASCADE, to='cedar_core.reference'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
