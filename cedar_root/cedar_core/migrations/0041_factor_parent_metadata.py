# Generated by Django 3.1.7 on 2021-09-09 15:01

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cedar_core', '0040_delete_factor_parent_frequency'),
    ]

    operations = [
        migrations.CreateModel(
            name='factor_parent_metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.DecimalField(blank=True, decimal_places=2, help_text='The frequency of factor implementation', max_digits=10, null=True)),
                ('frequency_distribution', models.CharField(blank=True, help_text='(optional) if a point value is not provided for frequency, a distribution name can be specified with parameters in other fields', max_length=200, null=True)),
                ('frequency_param_a', models.DecimalField(blank=True, decimal_places=2, help_text='First distribution parameter. Beta = a. Lower limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_param_b', models.DecimalField(blank=True, decimal_places=2, help_text='Second distribtuion parameter. Normal/log-normal = mean. Beta = b. Poisson = lambda. Mid or most-likely value for pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_param_c', models.DecimalField(blank=True, decimal_places=2, help_text='Third distribution parameter. Normal/log-normal = SD/s, Upper limit for uniform (i.e. range), pareto, triangular, etc.', max_digits=10, null=True)),
                ('frequency_data_apply_start_year', models.IntegerField(blank=True, help_text='The first year this frequency applies to; if NULL, all years', null=True)),
                ('frequency_data_apply_end_year', models.IntegerField(blank=True, help_text='The last year this frequency applies to; if NULL, all years from start', null=True)),
                ('frequency_data_source', models.CharField(blank=True, help_text='The reference, or the person who provided the estimate', max_length=500, null=True)),
                ('frequency_data_source_added_year', models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True)),
                ('note', models.TextField(blank=True, help_text='Notes', null=True)),
                ('is_applicable_past', models.BooleanField(blank=True, help_text='Applicability in past', null=True)),
                ('is_applicable_present', models.BooleanField(blank=True, help_text='Applicability in present', null=True)),
                ('is_applicable_future', models.BooleanField(blank=True, help_text='Applicability in future', null=True)),
                ('applicable_data_source', models.CharField(blank=True, help_text='The reference, or the person who assessed applicability', max_length=200, null=True)),
                ('applicable_data_source_added_year', models.IntegerField(blank=True, help_text='The year the reference was queried (if personal communication), or year published (if document)', null=True)),
                ('fk_evidence_type_quality_applicable_id', models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_applicability', to='cedar_core.evidence_type_quality')),
                ('fk_evidence_type_quality_frequency_id', models.ForeignKey(blank=True, help_text='The reference or source type ID, as an estimation of source quality (e.g. personal communication, surveillence, small study)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evidence_quality_frequency', to='cedar_core.evidence_type_quality')),
                ('fk_factor_parent_id', models.ForeignKey(blank=True, help_text='The parent factor identifier, or PFID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.factor_parent')),
                ('fk_location_sub_id', models.ForeignKey(blank=True, help_text='The ID of the location from the location_02 table', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.location_02')),
                ('fk_user_entry_id', models.ForeignKey(blank=True, help_text='The user who added the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_entry', to='cedar_core.legacy_user')),
                ('fk_user_review_id', models.ForeignKey(blank=True, help_text='The user who reviewed the frequency information', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_review', to='cedar_core.legacy_user')),
            ],
        ),
    ]
