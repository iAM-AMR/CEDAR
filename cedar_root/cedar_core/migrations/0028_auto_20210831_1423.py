# Generated by Django 3.1.7 on 2021-08-31 18:23

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cedar_core', '0027_auto_20210211_1142'),
    ]

    operations = [
        migrations.CreateModel(
            name='genetic_element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element_uid', models.PositiveIntegerField(blank=True, null=True)),
                ('element_name', models.CharField(blank=True, max_length=500, null=True)),
                ('element_alias', models.CharField(blank=True, max_length=500, null=True)),
                ('element_type', models.CharField(blank=True, max_length=500, null=True)),
                ('element_accession_no', models.CharField(blank=True, max_length=500, null=True)),
                ('element_family_accession_no', models.CharField(blank=True, max_length=500, null=True)),
                ('to_review', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='res_outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urid', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('place_in_text', models.CharField(blank=True, help_text='The location of the factor data in-text, i.e. "Table 2". If the data is from the body of the text, use the page and paragraph numbers (Pg. and Para. respectively)', max_length=50, null=True)),
                ('contable_a', models.PositiveIntegerField(blank=True, help_text='The number of observations of resistance in the exposed group', null=True)),
                ('contable_b', models.PositiveIntegerField(blank=True, help_text='The number of observations of susceptibility in the exposed group', null=True)),
                ('contable_c', models.PositiveIntegerField(blank=True, help_text='The number of observations of resistance in the referent group', null=True)),
                ('contable_d', models.PositiveIntegerField(blank=True, help_text='The number of observations of susceptibility in the referent group', null=True)),
                ('prevtable_a', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('prevtable_b', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the exposed group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('prevtable_c', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of resistance in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('prevtable_d', models.DecimalField(blank=True, decimal_places=2, help_text='The proportion of observations of susceptibility in the referent group, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('table_n_exp', models.PositiveIntegerField(blank=True, help_text='The total number of observations in the exposed group', null=True)),
                ('table_n_ref', models.PositiveIntegerField(blank=True, help_text='The total number of observations in the referent group', null=True)),
                ('odds_ratio', models.DecimalField(blank=True, decimal_places=2, help_text='The odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('odds_ratio_lo', models.DecimalField(blank=True, decimal_places=2, help_text='The lower (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('odds_ratio_up', models.DecimalField(blank=True, decimal_places=2, help_text='The upper (usually 95%) confidence interval of the odds ratio that describes the factor, up to 2 decimal places', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('odds_ratio_sig', models.CharField(blank=True, help_text='The significance (p-value) associated with the odds ratio that describes the factor, i.e. "< 0.05". May include symbols, numbers, and letters. There is no significance associated with count or prevalence data, only Odds Ratios. If an odds ratio is provided, without a significance level, please report "NR" for "not reported"', max_length=20, null=True)),
                ('odds_ratio_confidence', models.DecimalField(blank=True, decimal_places=3, help_text='The level pertaining to the lower and upper confidence intervals (i.e. 95%)', max_digits=5, null=True)),
                ('figure_extract', models.BooleanField(blank=True, null=True)),
                ('figure_extract_reproducible', models.BooleanField(blank=True, null=True)),
                ('fk_figure_extract_method_id', models.TextField(blank=True, null=True)),
                ('extraction_num', models.PositiveIntegerField(blank=True, null=True)),
                ('extract_date', models.DateField(blank=True, null=True)),
                ('extract_version', models.PositiveIntegerField(blank=True, null=True)),
                ('fk_extract_user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.legacy_user')),
                ('fk_genetic_element_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.genetic_element')),
                ('fk_group_observe_prod_stage_id', models.ForeignKey(blank=True, help_text='The production stage at which the observations were recorded (i.e. factor observed)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage')),
                ('fk_microbe_01_id', models.ForeignKey(blank=True, help_text='The microbe assayed for resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_01')),
                ('fk_microbe_02_id', models.ForeignKey(blank=True, help_text='The subtype of the microbe assayed for resistance', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.microbe_02')),
                ('fk_moa_type_id', models.ForeignKey(blank=True, help_text='The type of measure of association reported for the factor', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_type')),
                ('fk_moa_unit_id', models.ForeignKey(blank=True, help_text='The experimental unit or level of analysis for which the measure of association is presented', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.moa_unit')),
                ('fk_resistance_id', models.ForeignKey(blank=True, help_text='The resistance that was assayed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.atc_vet')),
            ],
        ),
        migrations.RenameField(
            model_name='factor',
            old_name='host_02_id',
            new_name='fk_host_02_id',
        ),
        migrations.RenameField(
            model_name='factor',
            old_name='factor_ref_id',
            new_name='fk_reference_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='amu_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='contable_a',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='contable_b',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='contable_c',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='contable_d',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='host_01_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='microbe_01_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='microbe_02_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='moa_type_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='moa_unit_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='odds_ratio',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='odds_ratio_confidence',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='odds_ratio_lo',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='odds_ratio_sig',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='odds_ratio_up',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='place_in_text',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prevtable_a',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prevtable_b',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prevtable_c',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prevtable_d',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prod_stage_group_allocate_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='prod_stage_group_observe_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='resistance_id',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='table_n_exp',
        ),
        migrations.RemoveField(
            model_name='factor',
            name='table_n_ref',
        ),
        migrations.AddField(
            model_name='factor',
            name='exclude_is_validation',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='factor',
            name='fk_group_allocate_prod_stage_id',
            field=models.ForeignKey(blank=True, help_text='The production stage at which the groups were allocated (i.e. factor applied)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.production_stage'),
        ),
        migrations.AddField(
            model_name='factor',
            name='fk_host_01_id',
            field=models.ForeignKey(blank=True, help_text='The host animal from which the microbe was isolated', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.host_01'),
        ),
        migrations.AddField(
            model_name='factor',
            name='ufid',
            field=models.PositiveIntegerField(blank=True, null=True, unique=True),
        ),
        migrations.CreateModel(
            name='ro_factor_join',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fk_ufid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cedar_core.factor', to_field='ufid')),
                ('fk_urid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.res_outcome', to_field='urid')),
            ],
        ),
        migrations.AddField(
            model_name='res_outcome',
            name='fk_ufid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cedar_core.factor', to_field='ufid'),
        ),
    ]
